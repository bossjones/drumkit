{
    "docs": [
        {
            "location": "/", 
            "text": "Drumkit \n\n\nDrumkit is a toolkit for developing Drupal sites, modules, themes and profiles.\n\n\nQuick Start\n\n\nDrumkit is installed on a project-by-project basis, as a git submodule. To add \ndrumkit\n to an existing Drupal project, run the following command:\n\n\nwget -O - https://raw.githubusercontent.com/ergonlogic/drumkit/master/scripts/install.sh | /bin/bash\n\n\n\n\nFor further details on installation procedures and options, see the \nInstall\n page.\n\n\nCommon Commands\n\n\nDrumkit is built atop \nGNU Make\n, a ubiquitous build tool present on all Unixes. As such, all Drumkit commands must be run from the root of your project, and are prefaced by \nmake\n.\n\n\n\n\nmake help\n - Print a help message.\n\n\nmake install\n - Install all tools.\n\n\nmake up\n - Start a VM, in which a Drupal site will be installed and made available at http://localhost:8888.\n\n\nmake test\n - Run tests.\n\n\nmake rebuild\n - Destroy the current VM and re-provision a new one.\n\n\n\n\nDrumkit comes with lots of other commands (GNU Make targets). For more details, see the \nUsage\n page.", 
            "title": "Home"
        }, 
        {
            "location": "/#drumkit", 
            "text": "Drumkit is a toolkit for developing Drupal sites, modules, themes and profiles.", 
            "title": "Drumkit"
        }, 
        {
            "location": "/#quick-start", 
            "text": "Drumkit is installed on a project-by-project basis, as a git submodule. To add  drumkit  to an existing Drupal project, run the following command:  wget -O - https://raw.githubusercontent.com/ergonlogic/drumkit/master/scripts/install.sh | /bin/bash  For further details on installation procedures and options, see the  Install  page.", 
            "title": "Quick Start"
        }, 
        {
            "location": "/#common-commands", 
            "text": "Drumkit is built atop  GNU Make , a ubiquitous build tool present on all Unixes. As such, all Drumkit commands must be run from the root of your project, and are prefaced by  make .   make help  - Print a help message.  make install  - Install all tools.  make up  - Start a VM, in which a Drupal site will be installed and made available at http://localhost:8888.  make test  - Run tests.  make rebuild  - Destroy the current VM and re-provision a new one.   Drumkit comes with lots of other commands (GNU Make targets). For more details, see the  Usage  page.", 
            "title": "Common Commands"
        }, 
        {
            "location": "/install/", 
            "text": "Installation \n\n\nOne-liner\n\n\nwget -O - https://raw.githubusercontent.com/ergonlogic/drumkit/master/scripts/install.sh | /bin/bash\n\n\n\n\nInstall Tools\n\n\nTo see the tools that \ndrumkit\n can install, and options related to them, run:\n\n\n$ make tools-help\nmake composer\n  Install Composer.\nmake composer COMPOSER_REL=1.0.0-beta1\n  Install the 1.0.0-beta1 release of Composer.\nmake drush\n  Install Drush.\nmake drush DRUSH_REL=8.0.5\n  Install the 8.0.5 release of Drush.\nmake behat\n  Install Behat.\nmake selenium\n  Install Selenium.\n\n\n\n\nAll of them can be installed at once by running:\n\n\n$ make install\n\n\n\n\nThe tools are installed locally in \n.mk/.local/\n. The idea here is to isolate\nthem from your local system setup. this should make it easier when working as a\nteam, since you'll all be using the same suite of local tools.\n\n\nTo use these locally installed tools, run:\n\n\n$ .mk/scripts/hacking.sh\n\n\n\n\nThis will (temporarily) add the local tools directory to your PATH, taking\npriority over you your normal system installed tools.", 
            "title": "Install"
        }, 
        {
            "location": "/install/#installation", 
            "text": "", 
            "title": "Installation"
        }, 
        {
            "location": "/install/#one-liner", 
            "text": "wget -O - https://raw.githubusercontent.com/ergonlogic/drumkit/master/scripts/install.sh | /bin/bash", 
            "title": "One-liner"
        }, 
        {
            "location": "/install/#install-tools", 
            "text": "To see the tools that  drumkit  can install, and options related to them, run:  $ make tools-help\nmake composer\n  Install Composer.\nmake composer COMPOSER_REL=1.0.0-beta1\n  Install the 1.0.0-beta1 release of Composer.\nmake drush\n  Install Drush.\nmake drush DRUSH_REL=8.0.5\n  Install the 8.0.5 release of Drush.\nmake behat\n  Install Behat.\nmake selenium\n  Install Selenium.  All of them can be installed at once by running:  $ make install  The tools are installed locally in  .mk/.local/ . The idea here is to isolate\nthem from your local system setup. this should make it easier when working as a\nteam, since you'll all be using the same suite of local tools.  To use these locally installed tools, run:  $ .mk/scripts/hacking.sh  This will (temporarily) add the local tools directory to your PATH, taking\npriority over you your normal system installed tools.", 
            "title": "Install Tools"
        }, 
        {
            "location": "/usage/", 
            "text": "Usage \n\n\nGNU Make\n\n\nMost Drupal platform creation refers to Drush makefiles. Drumkit includes a set\nof \nGNU Make\nfiles. Familiarity with Make\nwill allow you to extend and override Drumkit's functionality. However, for\nnormal usage all you need to know is that all commands are prefaced by \nmake\n,\nwhich invokes GNU Make.\n\n\nHelp\n\n\nTo see what commands are available, run:\n\n\n$ make help\nmake help\n  Print this help message.\nmake tools-help\n  Print install help for all tools.\nmake drupal\n  Build a Drupal codebase, install a site and start a web server.\nmake kill-server\n  Stop the server running started during site install.\nmake install\n  Install all tools.\nmake test\n  Run tests.\nmake vagrant\n  Add a Vagrantfile.\nmake up\n  Launch Vagrant.\nmake rebuild\n  Destroy the current Vagrant VM and re-provision a new one.\n\n\n\n\nTo see the tools that \ndrumkit\n can install, and options related to them, run:\n\n\n$ make tools-help\nmake composer\n  Install Composer.\nmake composer COMPOSER_REL=1.0.0-beta1\n  Install the 1.0.0-beta1 release of Composer.\nmake drush\n  Install Drush.\nmake drush DRUSH_REL=8.0.5\n  Install the 8.0.5 release of Drush.\nmake behat\n  Install Behat.\nmake selenium\n  Install Selenium.", 
            "title": "Usage"
        }, 
        {
            "location": "/usage/#usage", 
            "text": "", 
            "title": "Usage"
        }, 
        {
            "location": "/usage/#gnu-make", 
            "text": "Most Drupal platform creation refers to Drush makefiles. Drumkit includes a set\nof  GNU Make files. Familiarity with Make\nwill allow you to extend and override Drumkit's functionality. However, for\nnormal usage all you need to know is that all commands are prefaced by  make ,\nwhich invokes GNU Make.", 
            "title": "GNU Make"
        }, 
        {
            "location": "/usage/#help", 
            "text": "To see what commands are available, run:  $ make help\nmake help\n  Print this help message.\nmake tools-help\n  Print install help for all tools.\nmake drupal\n  Build a Drupal codebase, install a site and start a web server.\nmake kill-server\n  Stop the server running started during site install.\nmake install\n  Install all tools.\nmake test\n  Run tests.\nmake vagrant\n  Add a Vagrantfile.\nmake up\n  Launch Vagrant.\nmake rebuild\n  Destroy the current Vagrant VM and re-provision a new one.  To see the tools that  drumkit  can install, and options related to them, run:  $ make tools-help\nmake composer\n  Install Composer.\nmake composer COMPOSER_REL=1.0.0-beta1\n  Install the 1.0.0-beta1 release of Composer.\nmake drush\n  Install Drush.\nmake drush DRUSH_REL=8.0.5\n  Install the 8.0.5 release of Drush.\nmake behat\n  Install Behat.\nmake selenium\n  Install Selenium.", 
            "title": "Help"
        }, 
        {
            "location": "/documentation/", 
            "text": "Documentation \n\n\nWe maintain the Drumkit documentation site using\n\nmkdocs\n. To get started contributing to this project,\nfork it on Github. Then install mkdocs and clone this repo:\n\n\n$ sudo brew install python              # For OSX users\n$ sudo aptitude install python-pip      # For Debian/Ubuntu users\n$ sudo pip install mkdocs\n$ git clone https://github.com/ergonlogic/drumkit.git\n$ cd drumkit\n$ git remote add sandbox https://github.com/\nusername\n/drumkit.git\n$ mkdocs serve\n\n\n\n\nYour local Drumkit docs site should now be available for browsing:\n\nhttp://127.0.0.1:8000/\n. When you find a typo, an\nerror, unclear or missing explanations or instructions, hit ctrl-c, to stop the\nserver, and start editing. Find the page you\u2019d like to edit; everything is in\nthe docs/ directory. Make your changes, commit and push them, and start a pull\nrequest:\n\n\n$ git checkout -b fix_typo\n$ vim docs/index.md                     # Add/edit/remove whatever you see fit. Be bold!\n$ mkdocs build --clean; mkdocs serve    # Go check your changes. We\u2019ll wait...\n$ git diff                              # Make sure there aren\u2019t any unintended changes.\ndiff --git a/docs/index.md b/docs/index.md\n...\n$ git commit -am\u201dFixed typo.\u201d           # Useful commit message are a good habit.\n$ git push sandbox fix_typo\n\n\n\n\nVisit your fork on Github and start a Pull Request.", 
            "title": "Documentation"
        }, 
        {
            "location": "/documentation/#documentation", 
            "text": "We maintain the Drumkit documentation site using mkdocs . To get started contributing to this project,\nfork it on Github. Then install mkdocs and clone this repo:  $ sudo brew install python              # For OSX users\n$ sudo aptitude install python-pip      # For Debian/Ubuntu users\n$ sudo pip install mkdocs\n$ git clone https://github.com/ergonlogic/drumkit.git\n$ cd drumkit\n$ git remote add sandbox https://github.com/ username /drumkit.git\n$ mkdocs serve  Your local Drumkit docs site should now be available for browsing: http://127.0.0.1:8000/ . When you find a typo, an\nerror, unclear or missing explanations or instructions, hit ctrl-c, to stop the\nserver, and start editing. Find the page you\u2019d like to edit; everything is in\nthe docs/ directory. Make your changes, commit and push them, and start a pull\nrequest:  $ git checkout -b fix_typo\n$ vim docs/index.md                     # Add/edit/remove whatever you see fit. Be bold!\n$ mkdocs build --clean; mkdocs serve    # Go check your changes. We\u2019ll wait...\n$ git diff                              # Make sure there aren\u2019t any unintended changes.\ndiff --git a/docs/index.md b/docs/index.md\n...\n$ git commit -am\u201dFixed typo.\u201d           # Useful commit message are a good habit.\n$ git push sandbox fix_typo  Visit your fork on Github and start a Pull Request.", 
            "title": "Documentation"
        }
    ]
}